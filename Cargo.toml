[package]
name = "fetcher"
description = "Automation and scalping framework"
version = "0.15.0-alpha.1"
license = "MPL-2.0"
repository = "https://github.com/SergeyKasmy/fetcher"
edition = "2024"

[features]
default = ["send", "scaffold"]
send = []
scaffold = ["dep:tracing-journald", "dep:tracing-subscriber", "tokio/signal"]

[dependencies]
async-imap = { version = "0.10.3", features = ["runtime-tokio"], default-features = false }
bon = "3.4.0"
chrono = "0.4.39"
either = "1.13.0"
feed-rs = "2.3.1"
futures = "0.3.31"
html-escape = "0.2.13"
itertools = "0.14.0"
mailparse = "0.15.0"
once_cell = "1.20.2"
rand = "0.8.5"
regex = "1.11.1"
reqwest = { version = "0.12.12", features = ["rustls-tls", "gzip", "json", "cookies"], default-features = false }
roux = { version = "2.2.14", default-features = false, features = ["rustls"] }
scraper = "0.23.1"
serde_json = "1.0.135"
serde = { version = "1.0.217", features = ["derive"] }
serenity = "0.12.4"
tap = "1.0.1"
teloxide = { version = "0.13.0", features = ["rustls", "throttle"], default-features = false }
thiserror = "2.0.11"
tokio-rustls = "0.26.2"
tokio = { version = "1.43.0", features = ["fs", "io-std", "process"] }
tracing = "0.1.41"
url = "2.5.4"
webpki-roots = "0.26.8"

# feature = "scaffold"
tracing-journald = { version = "0.3.1", optional = true }
tracing-subscriber = { version = "0.3.19", features = ["env-filter", "tracing-log", "time", "local-time"], optional = true }

[dev-dependencies]
assert_matches = "1.5"
# tokio-test = "0.4.4"

[lints.rust]
missing_docs = "warn"
unsafe_code = "forbid"

[lints.clippy]
pedantic = { level = "warn", priority = -1 }
nursery  = { level = "warn", priority = -1 }

### Hand-picked restrictions (as of Rust 1.84.0)
clone_on_ref_ptr = "warn"
dbg_macro = "warn"
doc_include_without_cfg = "warn"
error_impl_error = "warn"
exit = "warn"
filetype_is_file = "warn"
format_push_string = "warn"
let_underscore_untyped = "warn"
map_with_unused_argument_over_ranges = "warn"
missing_assert_message = "warn"
missing_docs_in_private_items = "warn"
needless_raw_strings = "warn"
pathbuf_init_then_push = "warn"
print_stderr = "warn"
rest_pat_in_fully_bound_structs = "warn"
same_name_method = "warn"
str_to_string = "warn"
string_to_string = "warn"
tests_outside_test_module = "warn"
todo = "warn"
try_err = "warn"
unimplemented = "warn"
unused_result_ok = "warn"
unwrap_used = "warn"

### Overrides of overly restrictive pedantic and nursery lints with explanations
# matches!() adds too much noise for little benefit
equatable_if_let = "allow" 

# sometimes useful
explicit_deref_methods = "allow"

# too much noise for little benefit (may change in the future)
missing_const_for_fn = "allow"

# some types are more descriptive with modules name in the name, especially if this type is often used out of the context of this module
module_name_repetitions = "allow"

# "harder to read, false branch before true branch"
option_if_let_else = "allow" 

# sometimes makes the control flow harder to read, should be used at the developer's discretion
redundant_else = "allow"

# may be hard to understand what Self even is deep into a function's body
use_self = "allow"

# often a match can better highlight which branch is more important and draw attention to it
single_match_else = "allow"
